import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler
import sqlite3
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('anon_questions.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        referral_code TEXT UNIQUE
    )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS questions (
        question_id INTEGER PRIMARY KEY AUTOINCREMENT,
        receiver_id INTEGER,
        question_text TEXT,
        is_answered INTEGER DEFAULT 0,
        FOREIGN KEY (receiver_id) REFERENCES users (user_id)
    )
    ''')
    
    conn.commit()
    conn.close()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
def generate_referral_code(user_id):
    return f"ref_{user_id}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    conn = sqlite3.connect('anon_questions.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    cursor.execute('SELECT referral_code FROM users WHERE user_id = ?', (user.id,))
    result = cursor.fetchone()
    
    if result:
        referral_code = result[0]
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        referral_code = generate_referral_code(user.id)
        cursor.execute(
            'INSERT INTO users (user_id, username, referral_code) VALUES (?, ?, ?)',
            (user.id, user.username, referral_code)
        )
        conn.commit()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
    bot_username = context.bot.username
    referral_link = f"https://t.me/{bot_username}?start={referral_code}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–≠—Ç–æ –±–æ—Ç –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n"
        f"{referral_link}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –µ—ë –¥—Ä—É–∑—å—è–º, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –∑–∞–¥–∞—Ç—å —Ç–µ–±–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å!"
    )
    
    update.message.reply_text(message)
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
def start_with_referral(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    args = context.args
    
    if args and args[0].startswith('ref_'):
        referral_code = args[0]
        conn = sqlite3.connect('anon_questions.db')
        cursor = conn.cursor()
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
        cursor.execute('SELECT user_id FROM users WHERE referral_code = ?', (referral_code,))
        result = cursor.fetchone()
        
        if result:
            receiver_id = result[0]
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
            context.user_data['asking_question_to'] = receiver_id
            update.message.reply_text(
                "üìù –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
            )
        else:
            update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞.")
        
        conn.close()
    else:
        # –û–±—ã—á–Ω—ã–π /start –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
        start(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤)
def handle_message(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    message_text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–¥–∞–µ—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å
    if 'asking_question_to' in context.user_data:
        receiver_id = context.user_data['asking_question_to']
        conn = sqlite3.connect('anon_questions.db')
        cursor = conn.cursor()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑—É
        cursor.execute(
            'INSERT INTO questions (receiver_id, question_text) VALUES (?, ?)',
            (receiver_id, message_text)
        )
        conn.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
        update.message.reply_text("‚úÖ –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–Ω–æ–Ω–∏–º–Ω–æ!")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        try:
            context.bot.send_message(
                chat_id=receiver_id,
                text=f"üì© –£ —Ç–µ–±—è –Ω–æ–≤—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å:\n\n{message_text}",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"answer_{cursor.lastrowid}")]
                ])
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {receiver_id}: {e}")
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        del context.user_data['asking_question_to']
        conn.close()
    else:
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å"
def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    
    if query.data.startswith('answer_'):
        question_id = int(query.data.split('_')[1])
        context.user_data['answering_question'] = question_id
        query.edit_message_text(
            text=query.message.text + "\n\n‚úèÔ∏è –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç:"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
def handle_answer(update: Update, context: CallbackContext) -> None:
    if 'answering_question' in context.user_data:
        question_id = context.user_data['answering_question']
        answer_text = update.message.text
        
        conn = sqlite3.connect('anon_questions.db')
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
        cursor.execute(
            'SELECT question_text FROM questions WHERE question_id = ?',
            (question_id,)
        )
        question_text = cursor.fetchone()[0]
        
        # –ü–æ–º–µ—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–π
        cursor.execute(
            'UPDATE questions SET is_answered = 1 WHERE question_id = ?',
            (question_id,)
        )
        conn.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –≤–æ–ø—Ä–æ—Å–∞
        # (–í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è—Ö, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã)
        
        update.message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        del context.user_data['answering_question']
        conn.close()

def main() -> None:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    TOKEN = os.getenv('TELEGRAM_TOKEN') or 'YOUR_TELEGRAM_BOT_TOKEN'
    
    # –°–æ–∑–¥–∞–µ–º Updater –∏ Dispatcher
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dispatcher.add_handler(CommandHandler("start", start_with_referral, pass_args=True))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_answer))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    dispatcher.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
